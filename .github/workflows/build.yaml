name: build

on:
  pull_request:
    branches: [ develop ]
  push:
    branches: [ develop ]

jobs:
  # Linux x86_64
  build-linux-x86_64:
    name: linux_x86_64
    runs-on: ubuntu-20
    steps:
      # checkout code
      - name: Checkout
        uses: actions/checkout@v2
      # build
      - name: Build (x86_64)
        run: perl scripts/manage.pl build -p x86_64 --prefix ../install
      # test
      - name: Test (x86_64)
        run: perl scripts/manage.pl test
      # install
      - name: Install (x86_64)
        run: perl scripts/manage.pl install
      # tag
      - name: TAG (x86_64)
        run: tar -zcvf install_x86_64.tar.gz ./install    
      - name: show1
        run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."  
      - name: show2
        run: echo "💡 The ${{ secrets.GITHUB_TOKEN }} secrets"    
      # 发布版本
      - name: Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}               # 标签名称
          release_name: Release ${{ github.ref }}   # 版本名称
          body_path:                                # 版本发布内容文件         
          draft: false                              # 是否为未发布版本
          prerelease: false                         # 是否为预览版     
      # upload
      #- name: Upload Release Artifact
      #  uses: actions/upload-release-asset@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.TOKEN }}
      #  with:
      #    upload_url: ${{ steps.create_release.outputs.upload_url }}
      #    asset_path: ./install_x86_64.tar.gz
      #    asset_name: install_x86_64.tar.gz
      #    asset_content_type: application/gzip
      # clean
      - name: Clean
        run: perl scripts/manage.pl clean

 
  # # Linux x86
  # build-linux-x86:
  #   name: linux_x86
  #   runs-on: ubuntu-20
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Build (x86)
  #       run: perl scripts/manage.pl build -p x86
  #     - name: Test (x86)
  #       run: perl scripts/manage.pl test
  #     - name: Clean
  #       run: perl scripts/manage.pl clean